#include <stdlib.inc>
#include <faldon.inc>

#define SCRIPTNAME "spy9"

#define PIT_RUN "^spy11_pit_run"
#define REMSCRIPT "spy11"
#define NPCTAG "spy_spy11_tag"

#define LEADER "^spy_team_lead"
#define JOIN "^spy_team"
#define ACTIVE "^spy_team_active"
#define ROLENONE 0
#define ROLEMAGE 1
#define ROLEWAR 2
#define ROLEASSISTANT 3

#define DAYCOUNT "#spy_team_nr"

#define MAX 255

#define OX 209
#define OY 228
#define OM 5

#define AX 258
#define AY 139
#define AM 4

#define TX 279
#define TY 165
#define TM 4
#define DX 297
#define DY 179

#define CTM 4
#define CTX 237
#define CTY 117
#define CDX 279
#define CDY 160

forward public demoteleader(sktid);
forward public leaderopts(mapid, npcid, sktid);
forward public trigger(sktid, mapid, x, y, z);
forward public converse(mapid, npcid, sktid, uidmsg);

giveoptions(mapid, npcid, sktid) {

	new lead = anyleaderinarea();


	shset(0, JOIN);
	new role = gsGetFlag(sktid, 0);
	
	if(role == ROLENONE) {
		shset(0, "You didn't pick a role... *cough* cheater *cough*");
		gsStatusMessage(sktid, 0);
		shset(0,"is_gm");
		if (gsGetFlag(sktid,0) == 0)
			warpout(sktid);
		return;
	}

	if(lead == 0) {
		shset(0, LEADER);
		gsSetFlag(sktid, 0, 1);

		shset(0, ACTIVE);
		gsSetFlag(sktid, 0, 1);

		shset(0, SCRIPTNAME);
		shset(1, "leaderopts");
		gsTimer(0, 1, 100, mapid, npcid, sktid, 0, 0);

		shset(0, "You are the team leader, get all participants to join the team. Shortly you will see the leader menu.");
		gsStatusMessage(sktid, 0);
		
		shset(0, "I am the team leader.");
		gsSayMessage(sktid, 0);

		heal(sktid);
		
	}
	else {

		if(isactive(sktid) == 0) {
		
			shset(0, ACTIVE);
			gsSetFlag(sktid, 0, 1);
		
			shset(0, "name");
			gsGetSFlag(lead, 0, 1);
		
			shset(0, "You joined the team, ");
			shappendb(0, 1);
			shappends(0, " is the team leader.");
		
			gsStatusMessage(sktid, 0);
			
			new members[MAX];
			members = getteammembers();
						
			for(new i = 0; i < sizeof(members) && members[i] != -1; i++) {
				if(members[i] != sktid) {
					shset(0, "name");
					gsGetSFlag(sktid, 0, 1);
					
					shappends(1, " has joined the team.");
					
					gsStatusMessage(members[i], 1);
				}
			}
			heal(sktid);
		
		}
		else {

		
			shset(0, "You have already joined the team, ");
			
			
			if(lead == sktid) {
				shappends(0, "you are the team leader.");
			}
			else {
				shset(1, "name");
				gsGetSFlag(lead, 1, 0);
				shappends(0, " is the team leader.");
			}
		
			gsStatusMessage(sktid, 0);
		
		}
	}

}

heal(sktid) {
	new hp,mhp,mp,mmp;
	gsGetHPMPInfo(sktid, hp, mhp, mp, mmp);
	gsSetHPMPInfo(sktid, mhp, mmp);
}

public leaderopts(mapid, npcid, sktid) {

	if(iswaiting(sktid) == 1 && isactive(sktid) == 1 && isleader(sktid) == 1) {

		gsConvBegin();
		shset(0, "As team leader you decide when it's time to go in, you have a minute to 'Go in!' if you don't a new leader will be picked.");
		gsConvSetMessage(0);
	
		shset(0, "Go in!");
		gsConvAddOption(1, 0);
	
		shset(0, "Give up team leader position.");
		gsConvAddOption(2, 0);
		
		gsConvEnd(npcid, mapid, sktid);
	
		shset(0, SCRIPTNAME);
		shset(1, "demoteleader");
		gsTimer(0, 1, 300, sktid, 0, 0, 0, 0);
	}

}

public demoteleader(sktid) {

	if(anyleaderinarea() == sktid) {

		shset(0, LEADER);
		gsSetFlag(sktid, 0, 0);
		shset(0, "I gave up the team leader position.");
		gsSayMessage(sktid, 0);
	}
}	

removeinactive() {
	for(new i = 0; i < MAX; i++) {
		shset(0, "level");
		if(gsGetFlag(i, 0) > 0) {
			if(iswaiting(i) == 1) {
				if(isactive(i) == 0) {
					warpout(i);
				}
			}

		}

	}
}

warpout(sktid) {
	shset(0, JOIN);
	new role = gsGetFlag(sktid, 0);

	if(role != ROLENONE) {
		shset(0, DAYCOUNT);
		new c = gsGetFlag(sktid, 0);
		gsSetFlag(sktid, 0, c - 1);
	}
	gsSetCoords(sktid, OX, OY, 0, OM);
}


public trigger(sktid, mapid, x, y, z) {
	warpout(sktid);
}



isleader(sktid) {
	shset(0, LEADER);
	return gsGetFlag(sktid, 0);
}

iswaiting(sktid) {
	return isinarea(sktid);
}

isactive(sktid) {
	shset(0, ACTIVE);
	return gsGetFlag(sktid, 0);
}

public converse(mapid, npcid, sktid, uidmsg) {

	scriptname(sktid);

	switch(uidmsg) {
		case 0: giveoptions(mapid, npcid, sktid);
		case 1: { 
			if(isleader(sktid) == 1) {
				if(anyincentralarea() == 0) {
					goin();
				}
			}
		}
		case 2: demoteleader(sktid);
	}
}

getteammembers() {

	new members[MAX - 1];
	new m = 0;
	
	for(new i = 0; i < MAX; i++) {
		shset(0, "level");
		if(gsGetFlag(i, 0) > 0) {
			if(iswaiting(i) == 1 && isactive(i) == 1) {
				members[m++] = i;
			}
		}
	}
	
	//Flag close element with -1
	members[m] = -1;
	
	return members;

}

goin() {

	killmobs();
	
	removeinactive(); // Warp players that are not part of team out.
	
	new members[MAX];
	members = getteammembers();
	
	// Warp team members to area.
	for(new i = 0; i < sizeof(members) && members[i] != -1; i++) {
		gsSetCoords(members[i], AX, AY, 0, AM);
	}
		
	// Format the team message string
	shset(3, "Team members");
	for(new i = 0; i < sizeof(members) && members[i] != -1; i++) {
		shset(1, "name");
		gsGetSFlag(members[i], 1, 2);
		shappends(3, ", ");
		shappendb(3, 2);
		
		shappends(3, " (");
		shset(1, JOIN);
		switch(gsGetFlag(members[i], 1)) {
			case 1: shappends(3, "Mage");
			case 2: shappends(3, "Warrior");
			case 3: shappends(3, "Assistant");
		}
		
		shappends(3, isleader(members[i]) == 1 ? ", Team Leader)" : ")");
	
	}
	
	// Send the message to team members.
	for(new i = 0; i < sizeof(members) && members[i] != -1; i++) {
		shappends(3, "                                              ");
		gsTutorialBegin();
		gsTutorialAdd(3);
		gsTutorialEnd(members[i]);
	}
	
	shset(0, PIT_RUN);
	new currentRun = gsGetFlag(0, 0);
	gsSetFlag(0, 0, ++currentRun); // kills any remaining timeouts for previous run
	
	shset(0, REMSCRIPT);
	shset(1, "countdown");
	gsCall(0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	
	
}

killmobs() {
	new i = 8192 + (2048 * AM);

	for (new a = 0; a < 2048; ++a) {
		++i;

		shset(0,"monster_number");
		new mobnr = gsGetFlag(i, 0); 
		if (mobnr != 10 && mobnr != 0 && isincentralarea(i) == 1) {
				gsSetHPMPInfo(i, 0, 0);
				gsKillSprite(0, i);
		}
		
	}
}

anyincentralarea() {
	for(new i = 0; i < MAX; i++) {
		if(isincentralarea(i) == 1) {
			return 1;
		}
	
	}
	
	return 0;
}

anyleaderinarea() {
	for(new i = 0; i < MAX; i++) {
		shset(0, "level");
		if(gsGetFlag(i, 0) > 0) {
			if(iswaiting(i) == 1) {
				if(isleader(i) == 1) {
					return i;
				}
			}

		}

	}
	
	return 0;
}

isincentralarea(sktid) {

	new x,y,z,m;
	gsGetCoords(sktid, x, y, z, m);


	if (m == CTM && x >= CTX && x <= CDX && y >= CTY && y <= CDY) {
		
		return 1;
	}
	else {
		
		return 0;
	}

}

isinarea(sktid) {

	new x,y,z,m;
	gsGetCoords(sktid, x, y, z, m);


	if (m == TM && x >= TX && x <= DX && y >= TY && y <= DY) {
		
		return 1;
	}
	else {
		
		return 0;
	}

}


scriptname(sktid) {

	if(isgm(sktid) == 1) {
		shset(0, "Script: ");
		shappends(0, SCRIPTNAME);
		gsStatusMessage(sktid, 0);
			
	}	
}
isgm(sktid) {
	shset(0, "is_gm");
	if(gsGetFlag(sktid, 0) == 1) {
		return 1;
	}	
	return 0;
}




